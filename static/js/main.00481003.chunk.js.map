{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","nodes","id","label","title","color","default_graph","edges","from","to","useState","length","n","setN","graph","setGraph","uuidv4","graph_key","setGraphKey","user_input","setUserInput","href","className","value","onChange","event","target","key","options","layout","hierarchical","height","events","select","getNetwork","network","onClick","input","split","parseInt","new_graph","i","node","push","edge","adj","Array","color_one","fill","color_two","visited","result","x","start","end","dfs","node_num","check_result","setNodeColor","check","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00481003.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\nimport Graph from 'react-graph-vis'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst max_size = 101\n\nfunction App() {\n  let nodes = [\n    { id: 1, label: '1', title: '1', color: 'lightgrey' },\n    { id: 2, label: '2', title: '2', color: 'lightgrey' },\n    { id: 3, label: '3', title: '3', color: 'lightgrey' },\n    { id: 4, label: '4', title: '4', color: 'lightgrey' },\n    { id: 5, label: '5', title: '5', color: 'lightgrey' },\n  ]\n\n  let edges = [\n    { from: 1, to: 2 },\n    { from: 1, to: 3 },\n    { from: 4, to: 5 },\n  ]\n\n  let default_graph = {\n    edges: edges,\n    nodes: nodes,\n  }\n\n  let [n, setN] = useState(nodes.length)\n  let [graph, setGraph] = useState(default_graph)\n  let [graph_key, setGraphKey] = useState(uuidv4)\n  let [user_input, setUserInput] = useState('5 3\\n1 2\\n1 3\\n4 5')\n\n  const options = {\n    layout: {\n      hierarchical: false,\n    },\n    edges: {\n      color: '#000000',\n    },\n    height: '500px',\n  }\n\n  const events = {\n    select: function (event) {\n      let { nodes, edges } = event\n    },\n  }\n\n  function handleChange(event) {\n    setUserInput(event.target.value)\n  }\n\n  function drawGraph(event) {\n    /** read in the input from the user */\n    let raw_input = user_input\n\n    if (raw_input === '') return\n\n    let input = raw_input.split('\\n')\n    let n = parseInt(input[0])\n\n    // limit number of nodes to max_size\n    if (n > max_size) return\n\n    /** construct the new graph based on the  */\n    let new_graph = { nodes: [], edges: [] }\n\n    // create nodes\n    for (let i = 1; i <= n; i++) {\n      let node = {\n        id: i,\n        label: `${i}`,\n        color: 'lightgrey',\n      }\n      new_graph.nodes.push(node)\n    }\n\n    for (let i = 1; i < input.length; i++) {\n      let nodes = input[i].split(' ')\n\n      let edge\n\n      if (nodes.length == 2) edge = { from: nodes[0], to: nodes[1] }\n      else if (nodes.length == 1) edge = { from: nodes[0] }\n\n      new_graph.edges.push(edge)\n    }\n\n    setGraphKey(uuidv4)\n    setN(n)\n    setGraph(new_graph)\n  }\n\n  function colorGraph(event) {\n    /** These variables will be used by the DFS algorithm to traverse the graph */\n    let adj = new Array(n + 1)\n\n    for (let i = 0; i <= n; i++) {\n      adj[i] = new Array()\n    }\n\n    let color_one = new Array(n + 1).fill(false)\n    let color_two = new Array(n + 1).fill(false)\n    let visited = new Array(n + 1).fill(false)\n    let result = true\n\n    /** convert the graph into an adjacency list representation */\n    for (const x in graph.edges) {\n      let start = graph.edges[x].from\n      let end = graph.edges[x].to\n      if (typeof end !== 'undefined') adj[start].push(end)\n    }\n\n    /** This traverses the graph and checks if a bipartite coloring is possible */\n    function dfs(start, color) {\n      visited[start] = true\n\n      if (color === 1) color_one[start] = true\n      else color_two[start] = true\n\n      for (const x in adj[start]) {\n        let node_num = adj[start][x]\n\n        if (!result) return\n\n        if (visited[node_num]) {\n          if (color === 1 && color_one[node_num]) {\n            result = false\n            return\n          }\n\n          if (color === 2 && color_two[node_num]) {\n            result = false\n            return\n          }\n\n          continue\n        }\n\n        let child_color\n\n        if (color === 1) child_color = 2\n        else child_color = 1\n\n        dfs(node_num, child_color)\n      }\n    }\n\n    /** This returns true if the graph can be colored, false otherwise */\n    function check() {\n      for (let i = 1; i <= n; i++) {\n        if (visited[i]) continue\n        dfs(i, 1)\n        if (!result) return false\n      }\n\n      return true\n    }\n\n    /** this colors the nodes if in a bipartite configuration if possible, all red otherwise */\n    function setNodeColor(check_result) {\n      for (const x in graph.nodes) {\n        let node = graph.nodes[x]\n\n        if (check_result)\n          color_one[node.id]\n            ? (node['color'] = 'green')\n            : (node['color'] = 'orange')\n        else node['color'] = 'red'\n      }\n      setGraphKey(uuidv4)\n      setGraph(graph)\n    }\n\n    setNodeColor(check())\n  }\n\n  return (\n    <div>\n      <nav>\n        <a href=\"https://fazalkhan.net/\"> back to Fazi's Homepage</a>\n      </nav>\n      <div className=\"title\">Bipartite Graph Coloring</div>\n      <div className=\"App\">\n        <textarea\n          value={user_input}\n          id=\"user-input\"\n          className=\"inputs\"\n          onChange={handleChange}\n        ></textarea>\n        <div className=\"graph-container\">\n          <Graph\n            key={graph_key}\n            graph={graph}\n            options={options}\n            events={events}\n            getNetwork={(network) => {}}\n          />\n        </div>\n        <div className=\"description\">\n          <p>\n            This app uses Depth-First Search to color a graph, such that no two\n            connected nodes have the same color.\n          </p>\n          <p>\n            1. On the first line, enter <b>N</b> and <b>M</b>. <br></br>\n            <ul>\n              <li>\n                <b>N</b> is the number of nodes that will be drawn. Nodes are\n                drawn numbered 1,...,<b>N</b>. <br></br>\n              </li>\n              <br></br>\n              <li>\n                <b>M</b> is the number of lines that follow, which specify the\n                edges. <br></br>\n              </li>\n              <br></br>\n              <li>\n                Edges are specifed as <b>start</b> <b>end</b>.<br></br>\n              </li>\n            </ul>\n            <br></br>\n            2. Click <b>Draw Graph</b> to create your graph. <br></br> <br></br>\n            <br></br>\n            3. Click <b>Color Graph</b> to see the bipartite coloring of the\n            graph. <br></br>\n            <ul>\n              <li>\n                If a solution exists, the graph will be colored in a bipartite\n                configuration.\n              </li>\n              <br></br>\n              <li>If a solution does not exist, all nodes will turn red.</li>\n            </ul>\n          </p>\n          <div className=\"button-container\">\n            <button onClick={drawGraph}>Draw Graph</button>\n            <button onClick={colorGraph}>Color Graph</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}